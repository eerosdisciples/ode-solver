/* Particle operations */

/* UNFINISHED MOD OF vector.c */

#include <stdarg.h>
#include <stdlib.h>
#include "particle.h"

/*
 * Initialize a new particle with specified position and velocity
 * RETURNS: The new particle
 */

particle particleInit(double x, double y, double z, double v_x, double v_y, double v_z ) { 
	/* Declare particle */
	particle p;

       	/* Allocate memory for six dimensional vector  FRÃ…GA MATHIAS OM .val, och unsigned */ 
	p.val = malloc(sizeof(double)*6);

        p = 

	return p;
}

	/* Copy arguments to particle in order */
	unsigned int i;
	for (i = 0; i < n; i++) {
		double val = va_arg(valist, double);
		v.val[i] = val;
                
	return v;
}
/* 
 * Add two particles
 *
 * a: First particle to add
 * b: Second particle to add
 * RETURNS: A new particle with
 * elements equal to a+b
 */ 
particle vadd(particle a, particle b) {
	/* Make sure a and b are of the same size */
	if (a.n != b.n)
		return (particle){NULL,0};
	
	/* Declare sum matrix */
	particle v = vnew(a.n);

	/* Sum over all elements */
	unsigned int i;
	for (i = 0; i < a.n; i++) {
		v.val[i] = a.val[i] + b.val[i];
	}

	return v;
}

/*
 * Multiply each element of a particle
 * by a scalar.
 *
 * scalar: Scalar to multiply with
 * a: Particle to multiply with
 */
particle vmuls(double scalar, particle a) {
	particle v = vnew(a.n);

	unsigned int i;
	for (i = 0; i < a.n; i++) {
		v.val[i] = scalar * a.val[i];
	}

	return v;
}
